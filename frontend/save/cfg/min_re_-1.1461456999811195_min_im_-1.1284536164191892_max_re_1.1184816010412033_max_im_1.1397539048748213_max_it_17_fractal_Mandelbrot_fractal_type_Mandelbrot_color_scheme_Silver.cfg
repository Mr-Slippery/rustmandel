[w]
width = 2000
height = 2000
size_inc = 50.0

[f]
min = [
    -1.1461456999811195,
    -1.1284536164191892,
]
max = [
    1.1184816010412033,
    1.1397539048748213,
]
max_it = 17
it_inc = 1
move_inc_rate = 0.0011125135577747742
zoom_factor = 1.0399999999999998
fractal = 'Mandelbrot'
fractal_type = 'Mandelbrot'
color_scheme = 'Silver'
power = 6
max_norm = 1367.2875674866743
buddhabrot_rel_size = 2.0
buddhabrot_points = 5000000


#// mandel.rs: 
#use num::complex::Complex;
#
#use crate::lib::dyn_sys::DDS;
#use crate::lib::dyn_sys::IFS;
#
#use super::app_cfg::{default_max_norm, default_power};
#use super::mandel_base::MandelBase;
#
#pub struct Mandelbrot {
#    base: MandelBase,
#}
#
#// Iterated Function System
#impl Mandelbrot {
#    pub fn new(max_iter: u64) -> Self {
#        Mandelbrot {
#            base: MandelBase {
#                max_iter: max_iter,
#                power: default_power(),
#                max_norm: default_max_norm(),
#            },
#        }
#    }
#
#    pub fn new_power_norm(max_iter: u64, power: i32, max_norm: f64) -> Self {
#        let mut m = Mandelbrot::new(max_iter);
#        m.base.power = power;
#        m.base.max_norm = max_norm;
#        m
#    }
#}
#
#impl IFS<Complex<f64>, u64> for Mandelbrot {
#    #[inline]
#    fn iter(&self, start: Complex<f64>, c: Complex<f64>) -> u64 {
#        let mut i: u64 = 0;
#        let mut z = start;
#        while i < self.base.max_iter && self.cont(z) {
#            z = self.next(z, c);
#            i += 1;
#        }
#        if i < self.base.max_iter {
#            return self.base.max_iter - i;
#        }
#        0
#    }
#}
#
#use crate::lib::num_traits::Zero;
#use std::ops::Rem;
#use crate::lib::num_traits::MulAdd;
#
#// This implementation corresponds to the Mandelbrot fractal.
#impl DDS<Complex<f64>> for Mandelbrot {
#    #[inline]
#    fn cont(&self, z: Complex<f64>) -> bool {
#        z.norm_sqr() <= self.base.max_norm
#    }
#
#    #[inline]
#    fn next(&self, z: Complex<f64>, c: Complex<f64>) -> Complex<f64> {
    #    if z.is_zero() {
    #        return c.powi(self.base.power)
    #    }
    #    let mut s = c;
    #    for i in 0..self.base.power + 1 {
    #        s += z / (c/z).powi(i)
    #    }
    #    s
#    }
#}
#