[w]
width = 500
height = 500
size_inc = 50.0

[f]
min = [
    1.863533670968085,
    -3.024368058033001,
]
max = [
    3.094419759305098,
    -1.8091618047659501,
]
max_it = 16
it_inc = 5
move_inc_rate = 0.009150716981984401
zoom_factor = 1.0599999999999998
fractal = 'Mandelbrot'
fractal_type = 'Mandelbrot'
color_scheme = 'Silver'
power = 2
max_norm = 6155.973597552115
buddhabrot_rel_size = 2.0
buddhabrot_points = 5000000


#// mandel.rs: 
#use num::complex::Complex;
#
#use crate::lib::dyn_sys::DDS;
#use crate::lib::dyn_sys::IFS;
#
#use super::app_cfg::{default_max_norm, default_power};
#use super::mandel_base::MandelBase;
#
#pub struct Mandelbrot {
#    base: MandelBase,
#}
#
#// Iterated Function System
#impl Mandelbrot {
#    pub fn new(max_iter: u64) -> Self {
#        Mandelbrot {
#            base: MandelBase {
#                max_iter: max_iter,
#                power: default_power(),
#                max_norm: default_max_norm(),
#            },
#        }
#    }
#
#    pub fn new_power_norm(max_iter: u64, power: i32, max_norm: f64) -> Self {
#        let mut m = Mandelbrot::new(max_iter);
#        m.base.power = power;
#        m.base.max_norm = max_norm;
#        m
#    }
#}
#
#impl IFS<Complex<f64>, u64> for Mandelbrot {
#    #[inline]
#    fn iter(&self, start: Complex<f64>, c: Complex<f64>) -> u64 {
#        let mut i: u64 = 0;
#        let mut z = start;
#        while i < self.base.max_iter && self.cont(z) {
#            z = self.next(z, c);
#            i += 1;
#        }
#        if i < self.base.max_iter {
#            return self.base.max_iter - i;
#        }
#        0
#    }
#}
#
#use crate::lib::num_traits::Zero;
#use std::ops::Rem;
#// use crate::lib::num_traits::MulAdd;
#use crate::lib::num_traits::One;
#
#// This implementation corresponds to the Mandelbrot fractal.
#impl DDS<Complex<f64>> for Mandelbrot {
#    #[inline]
#    fn cont(&self, z: Complex<f64>) -> bool {
#        z.norm_sqr() <= self.base.max_norm
#    }
#
#
#
#    #[inline]
#    fn next(&self, z: Complex<f64>, c: Complex<f64>) -> Complex<f64> {
#        let a: Complex<f64>;
#        if z.is_zero() {
#            unsafe {
#                x = 0.0;
#                y = 0.0
#            }
#            return c
#        }
#        unsafe {
#            x += (self.base.power as f64)/(c.im.rem(z.re)).sin().powi(self.base.power);
#            y += (self.base.power as f64)/(z.im.rem(c.re)).cos().powi(self.base.power);
#            a = Complex::new(x, y)
#        }
#        z * z + a/c
#    }
# }
#
#static mut x: f64 = 0.0;
#static mut y: f64 = 0.0;
#
#fn f_polar(a: f64, b: f64) -> Complex<f64>{
#    let d = Complex::new(a, b).to_polar();
#    Complex::new(d.0, d.1)
#}
#
#fn c_polar(a: Complex<f64>) -> Complex<f64>{
#    let d = a.to_polar();
#    Complex::new(d.0, d.1)
#}
#
#fn flip(a: Complex<f64>) -> Complex<f64> {
#    Complex::new(a.im, a.re)
#}