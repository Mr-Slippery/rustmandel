[w]
width = 500
height = 500
size_inc = 50.0

[f]
min = [
    -3.7522218678684136,
    -3.765293155840003,
]
max = [
    3.769612487854569,
    3.8054255641600028,
]
max_it = 288
it_inc = 16
move_inc_rate = 0.023619600000000004
zoom_factor = 1.5200000000000002
fractal = 'Buddhabrot'
fractal_type = 'Mandelbrot'
color_scheme = 'Silver'
power = 2
max_norm = 6.115295231999999
buddhabrot_rel_size = 2.0
buddhabrot_points = 5000000


#// buddha.rs: 
#use num::complex::Complex;
#
#use crate::lib::dyn_sys::DDS;
#use crate::lib::dyn_sys::IFS;
#
#use super::app_cfg::{default_max_norm, default_power};
#use super::mandel_base::MandelBase;
#
#pub struct Buddhabrot {
#    base: MandelBase,
#}
#
#// Iterated Function System
#impl Buddhabrot {
#    pub fn new(max_iter: u64) -> Self {
#        Buddhabrot {
#            base: MandelBase {
#                max_iter: max_iter,
#                power: default_power(),
#                max_norm: default_max_norm(),
#            },
#        }
#    }
#
#    pub fn new_power_norm(max_iter: u64, power: i32, max_norm: f64) -> Self {
#        let mut m = Buddhabrot::new(max_iter);
#        m.base.power = power;
#        m.base.max_norm = max_norm;
#        m
#    }
#}
#
#impl IFS<Complex<f64>, Vec<Complex<f64>>> for Buddhabrot {
#    #[inline]
#    fn iter(&self, start: Complex<f64>, c: Complex<f64>) -> Vec<Complex<f64>> {
#        let mut res: Vec<Complex<f64>> = vec![];
#        let mut i: u64 = 0;
#        let mut z = start;
#        res.push(z);
#        while i < self.base.max_iter && self.cont(z) {
#            z = self.next(z, c);
#            res.push(z);
#            i += 1;
#        }
#        if i < self.base.max_iter {
#            res
#        } else {
#            let r: Vec<Complex<f64>> = vec![];
#            r
#        }
#    }
#}
#
#use crate::lib::num_traits::Zero;
#use std::ops::Rem;
#// use crate::lib::num_traits::MulAdd;
#
#// This implementation corresponds to the Mandelbrot fractal.
#impl DDS<Complex<f64>> for Buddhabrot {
#    #[inline]
#    fn cont(&self, z: Complex<f64>) -> bool {
#        z.norm_sqr() <= self.base.max_norm
#    }
#
#    #[inline]
#    fn next(&self, z: Complex<f64>, c: Complex<f64>) -> Complex<f64> {
#        if z.is_zero() {
#            return c
#        }
#        let mut s = z;
#        for i in 1..self.base.power {
#            s += z / c.powi(i).atanh().rem(z)
#        }
#        s
#    }
#}
#