[w]
width = 200
height = 200
size_inc = 50.0

[f]
min = [
    0.3564352169026437,
    -1.0508081141029637,
]
max = [
    0.6400946955922056,
    -0.7671593778743583,
]
max_it = 500
it_inc = 100
move_inc_rate = 0.0023259894801216027
zoom_factor = 2.059999999999999
fractal = 'Mandelbrot'
fractal_type = 'Mandelbrot'
color_scheme = 'Red'
power = 130
buddhabrot_rel_size = 1.9
buddhabrot_points = 5000000


#// mandel.rs: 
#use num::complex::Complex;
#
#use crate::lib::dyn_sys::DDS;
#use crate::lib::dyn_sys::IFS;
#
#pub struct Mandelbrot {
#    pub max_iter: u64,
#    pub power: i32
#}
#
#// Iterated Function System
#impl Mandelbrot {
#    pub fn new(max_iter: u64, power: i32) -> Self {
#        Mandelbrot { max_iter: max_iter, power: power }
#    }
#}
#
#impl IFS<Complex<f64>, u64> for Mandelbrot {
#    #[inline]
#    fn iter(&self, start: Complex<f64>, c: Complex<f64>) -> u64 {
#        let mut i: u64 = 0;
#        let mut z = start;
#        while i < self.max_iter && self.cont(z) {
#            z = self.next(z, c);
#            i += 1;
#        }
#        if i < self.max_iter {
#            return self.max_iter - i;
#        }
#        0
#    }
#}
#
#use crate::lib::num_traits::Zero;
#use std::ops::Rem;
#use crate::lib::num_traits::MulAdd;
#
#// This implementation corresponds to the Mandelbrot fractal.
#impl DDS<Complex<f64>> for Mandelbrot {
#    #[inline]
#    fn cont(&self, z: Complex<f64>) -> bool {
#        z.norm_sqr() <= 128.0
#    }
#
#    #[inline]
#    fn next(&self, z: Complex<f64>, c: Complex<f64>) -> Complex<f64> {
#        if z.is_zero() {
#            c
#        } else {
#            let mut s = z;
#            for i in 1..self.power + 1 {
#                s += z / c.powi(i)
#            }
#            s
#        }
#    }
#}
#